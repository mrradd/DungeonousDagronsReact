[{"/Users/conrad/Documents/workspace/DungeonousDagronsReact/dungeonous_dagrons_react/src/index.jsx":"1","/Users/conrad/Documents/workspace/DungeonousDagronsReact/dungeonous_dagrons_react/src/InitiativeTracker5e.jsx":"2","/Users/conrad/Documents/workspace/DungeonousDagronsReact/dungeonous_dagrons_react/src/Datagrid.jsx":"3","/Users/conrad/Documents/workspace/DungeonousDagronsReact/dungeonous_dagrons_react/src/DataRow.jsx":"4"},{"size":332,"mtime":1609410233405,"results":"5","hashOfConfig":"6"},{"size":2219,"mtime":1615855488379,"results":"7","hashOfConfig":"6"},{"size":12294,"mtime":1615855410636,"results":"8","hashOfConfig":"6"},{"size":2321,"mtime":1609410233403,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"19y48i3",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"/Users/conrad/Documents/workspace/DungeonousDagronsReact/dungeonous_dagrons_react/src/index.jsx",[],["20","21"],"/Users/conrad/Documents/workspace/DungeonousDagronsReact/dungeonous_dagrons_react/src/InitiativeTracker5e.jsx",[],"/Users/conrad/Documents/workspace/DungeonousDagronsReact/dungeonous_dagrons_react/src/Datagrid.jsx",[],"/Users/conrad/Documents/workspace/DungeonousDagronsReact/dungeonous_dagrons_react/src/DataRow.jsx",["22"],"import React from 'react';\nimport PropTypes from 'prop-types';\n\n/******************************************************************************\n* Class DataRow *\n* Data for a single row. Allows editing stats, and row selection.\n******************************************************************************/\nexport default class DataRow extends React.Component {\n  constructor(props){\n    super(props);\n  }\n\n  /**\n   * Handles the change event on the inputs and updates the appropriate state value.\n   */\n  handleInputChange = (event) => {\n    this.props.handleInputChange(this.props.id, event);\n  }\n\n  /**\n   * Handles setting the selected id on the parent.\n   */\n  setSelectedID = () => {\n    this.props.setSelectedID(this.props.id);\n  }  \n\n  render() {\n    return (\n      <React.Fragment>\n        <tr style={{backgroundColor: this.props.turnOwner ? 'blue' : 'white'}}>\n          <td>\n            <button style={{color: this.props.selected ? 'green' : 'black'}} onClick={this.setSelectedID} ><span className=\"material-icons\">face</span></button>\n          </td>\n          <td>\n            <input name=\"name\" value={this.props.name} onChange={this.handleInputChange}/>\n          </td>\n          <td >\n            <input name=\"initiative\" value={this.props.initiative} onChange={this.handleInputChange}/>\n          </td>\n          <td>\n            <input name=\"hp\" value={this.props.hp} onChange={this.handleInputChange}/>\n          </td>\n          <td>\n            <input name=\"ac\" value={this.props.ac} onChange={this.handleInputChange}/>\n          </td>\n          <td>\n            <input name=\"dex\" value={this.props.dex} onChange={this.handleInputChange}/>\n          </td>\n          <td>\n            <input style={{width:\"500px\"}} name=\"notes\" value={this.props.notes} onChange={this.handleInputChange}/>\n          </td>\n        </tr>\n      </React.Fragment>\n    );\n  }\n}\n\nDataRow.propTypes = {\n  ac:                PropTypes.number,\n  dex:               PropTypes.number,\n  handleInputChange: PropTypes.func,\n  hp:                PropTypes.number,\n  id:                PropTypes.number,\n  initiative:        PropTypes.number,\n  name:              PropTypes.string,\n  notes:             PropTypes.string,\n  selected:          PropTypes.bool,\n  setSelectedID:     PropTypes.func,\n  turnOwner:         PropTypes.bool\n}\n",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":9,"column":3,"nodeType":"29","messageId":"30","endLine":11,"endColumn":4},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]