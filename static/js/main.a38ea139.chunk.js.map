{"version":3,"sources":["DataRow.jsx","Datagrid.jsx","InitiativeTracker5e.jsx","index.jsx"],"names":["DataRow","props","handleInputChange","event","id","setSelectedID","Fragment","style","backgroundColor","this","turnOwner","color","selected","onClick","className","name","value","onChange","initiative","hp","ac","dex","width","notes","React","Component","DataGrid","addRef","ref","rowRefs","push","addRow","rows","state","slice","row","Math","floor","random","Number","MAX_SAFE_INTEGER","setState","selectedID","deleteRow","filter","target","i","length","test","updateName","moveDown","index","temp","moveUp","nextTurn","turnOwnerFound","updateTurnOwner","incrementRound","orderByInitiative","swapped","prevTurn","round","renderRows","map","selekted","isOwner","indexOf","columns","getTurnOwnerName","protoTypes","incrementTurn","PropTypes","func","decrementTurn","number","InitiativeTracker5e","seconds","minutes","createRef","decrementRound","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a38ea139.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/******************************************************************************\r\n* Class DataRow *\r\n* Data for a single row. Allows editing stats, and row selection.\r\n******************************************************************************/\r\nexport default class DataRow extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  /**\r\n   * Handles the change event on the inputs and updates the appropriate state value.\r\n   */\r\n  handleInputChange = (event) => {\r\n    this.props.handleInputChange(this.props.id, event);\r\n  }\r\n\r\n  /**\r\n   * Handles setting the selected id on the parent.\r\n   */\r\n  setSelectedID = () => {\r\n    this.props.setSelectedID(this.props.id);\r\n  }  \r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <tr style={{backgroundColor: this.props.turnOwner ? 'blue' : 'white'}}>\r\n          <td>\r\n            <button style={{color: this.props.selected ? 'green' : 'black'}} onClick={this.setSelectedID} ><span className=\"material-icons\">face</span></button>\r\n          </td>\r\n          <td>\r\n            <input name=\"name\" value={this.props.name} onChange={this.handleInputChange}/>\r\n          </td>\r\n          <td >\r\n            <input name=\"initiative\" value={this.props.initiative} onChange={this.handleInputChange}/>\r\n          </td>\r\n          <td>\r\n            <input name=\"hp\" value={this.props.hp} onChange={this.handleInputChange}/>\r\n          </td>\r\n          <td>\r\n            <input name=\"ac\" value={this.props.ac} onChange={this.handleInputChange}/>\r\n          </td>\r\n          <td>\r\n            <input name=\"dex\" value={this.props.dex} onChange={this.handleInputChange}/>\r\n          </td>\r\n          <td>\r\n            <input style={{width:\"500px\"}} name=\"notes\" value={this.props.notes} onChange={this.handleInputChange}/>\r\n          </td>\r\n        </tr>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nDataRow.propTypes = {\r\n  ac:                PropTypes.number,\r\n  dex:               PropTypes.number,\r\n  handleInputChange: PropTypes.func,\r\n  hp:                PropTypes.number,\r\n  id:                PropTypes.number,\r\n  initiative:        PropTypes.number,\r\n  name:              PropTypes.string,\r\n  notes:             PropTypes.string,\r\n  selected:          PropTypes.bool,\r\n  setSelectedID:     PropTypes.func,\r\n  turnOwner:         PropTypes.bool\r\n}\r\n","import React from 'react';\r\nimport DataRow from './DataRow.jsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/******************************************************************************\r\n* Class DataGrid *\r\n* Displays a list of the characters and some info about them.\r\n******************************************************************************/\r\nexport default class DataGrid extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      selectedID: 0,\r\n      rows: [{\r\n        id: 0,\r\n        name: '',\r\n        initiative: 0,\r\n        hp: 0,\r\n        ac: 0,\r\n        dex: 0,\r\n        notes: '',\r\n        turnOwner: false\r\n      }],\r\n      columns: [\r\n        '',\r\n        'Name',\r\n        'Initiative',\r\n        'HP',\r\n        'AC',\r\n        'DEX',\r\n        'Notes'\r\n      ],\r\n      getTurnOwnerName: this.getTurnOwnerName\r\n    };\r\n\r\n    this.rowRefs = []\r\n  }\r\n\r\n  /**\r\n   * Adds a referencs to the ref list.\r\n   * @param  ref  Reference to add.\r\n   * \r\n   * NOTE: this actually gets called even on deletion. Who'd a thunk; probably has\r\n   * to do with the fact that this function is in 'ref'.\r\n   */\r\n  addRef = (ref) => {\r\n    if(ref){\r\n      this.rowRefs.push(ref);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a row to the row list.\r\n   */\r\n  addRow = () => {\r\n    var rows = this.state.rows.slice();\r\n    var row = {\r\n      id: Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER)),\r\n      name: '',\r\n      initiative: 0,\r\n      hp: 0,\r\n      ac: 0,\r\n      dex: 0,\r\n      notes: '',\r\n      turnOwner: false\r\n    };\r\n\r\n    rows.push(row);\r\n\r\n    this.setState({rows: rows, selectedID: -1});\r\n  };\r\n\r\n  componentDidUpdate(){\r\n    /** Make sure there is always a row, and to update the name of turn owner. */\r\n    if(this.state.rows.length <= 0){\r\n      this.updateName('');\r\n      this.addRow();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a row from the row list for given id.\r\n   * @param  id  ID of row to delete.\r\n   */\r\n  deleteRow = () => {\r\n    var rows = this.state.rows.slice();\r\n    var id = this.state.selectedID;\r\n    rows = rows.filter(function(row){return row.id !== id; });\r\n    this.setState({rows: rows, selectedID: -1});\r\n  };\r\n\r\n  /** //TODO CH  'event' WAS DEPRECATED. MAY NEED TO FIND ANOTHER WAY TO DO THIS IN THE FUTURE.\r\n   * Handles the change event on the inputs and updates the appropriate row.\r\n   * @param  id     ID of row to change.\r\n   * @param  event  Event from input being changed.\r\n   */\r\n  handleInputChange = (id, event) => {\r\n    var rows  = this.state.rows.slice();\r\n    var value = event.target.value;\r\n    var name  = event.target.name;\r\n\r\n    for(var i = 0; i < rows.length; i++){\r\n      if(rows[i].id === id){\r\n        /** Make sure value is an int. */\r\n        if(name !== 'name' && name !== 'notes'){\r\n          if(/^-?\\d*$/.test(value)){\r\n            value = Number(value);\r\n          }\r\n          else{\r\n            return;\r\n          }  \r\n        }\r\n\r\n        /** Update the name. */\r\n        if(rows[i].turnOwner && name === 'name'){\r\n          this.updateName(value);\r\n        }\r\n\r\n        rows[i][name] = value;\r\n        this.setState({rows: rows});\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves row down one.\r\n   */\r\n  moveDown = () => {\r\n    if(this.state.rows.length <= 1 || this.state.selectedID < 0){\r\n      return;\r\n    }\r\n\r\n    var rows  = this.state.rows.slice();\r\n    var index = 0;\r\n\r\n    for(var i = 0; i < rows.length; i++){\r\n      if(rows[i].id === this.state.selectedID){\r\n        if(i + 1 > rows.length - 1){\r\n          return;\r\n        }\r\n\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    var temp        = rows[index + 1];\r\n    rows[index + 1] = rows[index];\r\n    rows[index]     = temp;\r\n\r\n    this.setState({rows: rows});\r\n  }\r\n\r\n  /**\r\n   * Moves row up one.\r\n   */\r\n  moveUp = () => {\r\n    if(this.state.rows.length <= 1 || this.state.selectedID < 0){\r\n      return;\r\n    }\r\n\r\n    var rows  = this.state.rows.slice();\r\n    var index = 0;\r\n    \r\n    for(var i = 0; i < rows.length; i++){\r\n      if(rows[i].id === this.state.selectedID){\r\n        if(i - 1 < 0){\r\n          return;\r\n        }\r\n\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    var temp        = rows[index - 1];\r\n    rows[index - 1] = rows[index];\r\n    rows[index]     = temp;\r\n\r\n    this.setState({rows: rows});\r\n  }\r\n\r\n  /**\r\n   * Updates the turn index to the next character.\r\n   */\r\n  nextTurn = () => {\r\n    var rows = this.state.rows.slice();\r\n\r\n    var turnOwnerFound = false;\r\n\r\n    if(rows.length > 0){\r\n      /** Find the turn owner. */\r\n      for(var i = 0; i < rows.length; i++){\r\n\r\n        /** Update turn owner to next character. */\r\n        if(rows[i] && rows[i].turnOwner){\r\n          \r\n          /** Clear out current turn owner. */\r\n          turnOwnerFound = true;\r\n          this.updateTurnOwner(rows[i], false);\r\n          \r\n          /** Go to index 0 since we are going out of bounds. */\r\n          if(i + 1 >= rows.length){\r\n            this.props.incrementRound();\r\n            this.updateTurnOwner(rows[0], true);\r\n          }\r\n          \r\n          /** Set the index to next character. */\r\n          else if (rows[i + 1]){\r\n            this.updateTurnOwner(rows[i + 1], true);\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      /** No turn owner was found, so set it the the 0 index. */\r\n      if(!turnOwnerFound){\r\n        this.updateTurnOwner(rows[0], true);\r\n      }\r\n    }\r\n\r\n    this.setState({rows:rows});\r\n  };\r\n  \r\n  /**\r\n   * Orders all rows by initiative. \r\n   */\r\n  orderByInitiative = () => {\r\n    var rows    = this.state.rows.slice();\r\n    var swapped = false;\r\n      \r\n    do\r\n      {\r\n      swapped = false;\r\n      \r\n      for(var i = 0; i < rows.length - 1; i++)\r\n        {\r\n        var init1 = rows[i].initiative + rows[i].dex/100;\r\n        var init2 = rows[i+1].initiative + rows[i+1].dex/100;\r\n\r\n        if(init1 < init2)\r\n          {\r\n          var temp    = rows[i];\r\n          rows[i]     = rows[i + 1];\r\n          rows[i + 1] = temp;\r\n          swapped     = true;\r\n          }\r\n        }\r\n      }\r\n    while(swapped);\r\n\r\n    this.setState({rows: rows});\r\n  }\r\n\r\n  /**\r\n   * Updates the turn index to the previous character.\r\n   */\r\n  prevTurn = () => {\r\n    var rows = this.state.rows.slice();\r\n\r\n    var turnOwnerFound = false;\r\n    \r\n    if(rows.length > 0){\r\n      /** Find turn owner. */\r\n      for(var i = rows.length - 1; i >= 0; i--){\r\n        \r\n        /** We do not want to loop around if we are on round 1 and at the beginning of the list. */\r\n        if(i - 1 < 0 && this.props.round <= 1){\r\n          break;\r\n        }\r\n\r\n        /** Update turn owner index to next character. */\r\n        if(rows[i] && rows[i].turnOwner){\r\n          turnOwnerFound = true;\r\n          this.updateTurnOwner(rows[i], false);\r\n          \r\n          /** If at the beginning of the list, stop.*/\r\n          if(i - 1 < 0){\r\n            this.updateTurnOwner(rows[0], true);\r\n          }\r\n          else{\r\n            this.updateTurnOwner(rows[i - 1], true);\r\n          }\r\n\r\n        break;\r\n        }\r\n      }\r\n      \r\n      /** No turn owner was found, so set it the the 0 index. */\r\n      if(!turnOwnerFound){\r\n        this.updateTurnOwner(rows[0], true);\r\n      }\r\n    }\r\n\r\n    this.setState({rows: rows});\r\n  };\r\n\r\n  /**\r\n   * Maps row objects to elements.\r\n   */\r\n  renderRows = () =>{\r\n    var rows = this.state.rows.map((row) => {\r\n      var selekted = this.state.selectedID === row.id;\r\n\r\n      return (\r\n        <DataRow\r\n          key={row.id}\r\n          id={row.id}\r\n          name={row.name}\r\n          initiative={row.initiative}\r\n          hp={row.hp}\r\n          ac={row.ac}\r\n          dex={row.dex}\r\n          notes={row.notes}\r\n          turnOwner={row.turnOwner}\r\n          handleInputChange={this.handleInputChange}\r\n          updateName={this.updateName}\r\n          setSelectedID={this.setSelectedID}\r\n          selected={selekted}\r\n          >\r\n        </DataRow>);\r\n    });\r\n    \r\n    return rows;\r\n  }\r\n\r\n  /** Sets the selected ID.\r\n   * @param  id  ID of the character selected.\r\n   */\r\n  setSelectedID = (id) => {\r\n    this.setState({selectedID: this.state.selectedID === id ? -1 : id});\r\n  }\r\n\r\n  /**\r\n   * Calls the tracker's update name function.\r\n   * @param  name  Name of owner.\r\n   */\r\n  updateName = (name) => {\r\n    this.props.updateName(name);\r\n  }\r\n\r\n  /**\r\n   * Updates the turn owner's name.\r\n   * @param  id       Row id.\r\n   * @param  isOwner  Is this the owner of the turn.\r\n   */\r\n  updateTurnOwner = (row, isOwner) => {\r\n    var rows = this.state.rows.slice();\r\n    var index = rows.indexOf(row);\r\n\r\n    rows[index].turnOwner = isOwner;\r\n    \r\n    if(isOwner){\r\n      this.props.updateName(rows[index].name);\r\n    }\r\n    \r\n    this.setState({rows: rows});\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <button className=\"tooltip\" style={{color: 'red'}} onClick={this.deleteRow}>\r\n          <span className=\"material-icons\">clear</span>\r\n          <span className=\"tooltiptext\">Delete selected row.</span>\r\n        </button>\r\n        <button className=\"tooltip\" onClick={this.moveUp}>\r\n          <span className=\"material-icons\">keyboard_arrow_up</span>\r\n          <span className=\"tooltiptext\">Move selected row up.</span>\r\n        </button>\r\n        <button className=\"tooltip\" onClick={this.moveDown}>\r\n          <span className=\"material-icons\">keyboard_arrow_down</span>\r\n          <span className=\"tooltiptext\">Move selected row down.</span>\r\n        </button>\r\n        <button className=\"tooltip\" style={{color: 'green'}} onClick={this.addRow}>\r\n          <span className=\"material-icons\">add_circle</span>\r\n          <span className=\"tooltiptext\">Add new row.</span>\r\n        </button>\r\n        <button className=\"tooltip\" onClick={this.prevTurn}>\r\n          <span className=\"material-icons\">skip_previous</span>\r\n          <span className=\"tooltiptext\">Previous turn.</span>\r\n        </button>\r\n        <button className=\"tooltip\" onClick={this.nextTurn}>\r\n          <span className=\"material-icons\">skip_next</span>\r\n          <span className=\"tooltiptext\">Next turn.</span>\r\n        </button>\r\n        <button className=\"tooltip\" style={{color: 'orange'}} onClick={this.orderByInitiative}>\r\n          <span className=\"material-icons\">reorder</span>\r\n          <span className=\"tooltiptext\">Order by initiative</span>\r\n        </button>\r\n        <br></br>\r\n        <br></br>\r\n        <table>\r\n          <colgroup>\r\n            <col style={{width: \"50px\"}}></col>\r\n            <col style={{width: \"100px\"}}></col>\r\n            <col style={{width: \"100px\"}}></col>\r\n            <col style={{width: \"100px\"}}></col>\r\n            <col style={{width: \"100px\"}}></col>\r\n            <col style={{width: \"100px\"}}></col>\r\n            <col style={{width: \"300px\"}}></col>\r\n          </colgroup>\r\n          <tbody>\r\n            <tr key={0} id={0}>\r\n              <th>{this.state.columns[0]}</th>\r\n              <th>{this.state.columns[1]}</th>\r\n              <th>{this.state.columns[2]}</th>\r\n              <th>{this.state.columns[3]}</th>\r\n              <th>{this.state.columns[4]}</th>\r\n              <th>{this.state.columns[5]}</th>\r\n              <th>{this.state.columns[6]}</th>\r\n            </tr>\r\n            {this.renderRows()}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDataGrid.protoTypes = {\r\n  incrementTurn: PropTypes.func,\r\n  decrementTurn: PropTypes.func,\r\n  updateName: PropTypes.func,\r\n  round: PropTypes.number\r\n}\r\n","import React from 'react';\r\nimport DataGrid from './Datagrid.jsx';\r\n\r\n/******************************************************************************\r\n* Class InitiativeTrackerPathfinder *\r\n* Base for the Initiative Tracker for D&D 5th edition.\r\n******************************************************************************/\r\nexport class InitiativeTracker5e extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      round: 1,\r\n      seconds: '06',\r\n      minutes: '00',\r\n      name: ''\r\n    }\r\n\r\n    this.ref = React.createRef();\r\n  }\r\n  \r\n  /** Decrements the current round. Makes sure it doesn't go negative */\r\n  // decrementRound = () => {\r\n  //   var r = this.state.round;\r\n  //   r--;\r\n\r\n  //   /** Make sure we don't go into negative rounds. */\r\n  //   if(r < 1){\r\n  //     r = 1;\r\n  //   }\r\n    \r\n  //   this.setState({round: r});\r\n  // }\r\n\r\n  /** Increments the current round and clock. */\r\n  incrementRound = () => {\r\n    var round = this.state.round;\r\n    round++;\r\n\r\n    var seconds = ((round * 6) % 60);\r\n    var minutes = (Math.floor(round / 10));\r\n    \r\n    this.setState({seconds:(\"0\" + seconds).slice(-2), minutes: (\"0\" + minutes).slice(-2), round: round});\r\n  }\r\n\r\n  /** \r\n   * Updates the name.\r\n   * @param  name  Name of the character whose turn it is.\r\n   */\r\n  updateName = (name) => {\r\n    this.setState({name: name});\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <h1>Initiative Tracker - 5e</h1>\r\n        <div>\r\n          <h3>{this.state.minutes} : {this.state.seconds} - Round: {this.state.round}</h3>\r\n          <h3>{this.state.name.length > 0 ? this.state.name : \"No Name\"}'s Turn</h3>\r\n        </div>\r\n        <DataGrid round={this.state.round} updateName={this.updateName} incrementRound={this.incrementRound} decrementRound={this.decrementRound}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {InitiativeTracker5e} from './InitiativeTracker5e.jsx';\r\n\r\nclass App extends React.Component{\r\n  render(){\r\n    return(\r\n      <div>\r\n        <InitiativeTracker5e/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('app'))\r\n"],"sourceRoot":""}