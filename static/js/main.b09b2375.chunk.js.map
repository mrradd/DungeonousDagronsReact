{"version":3,"sources":["DataRow.jsx","Datagrid.jsx","InitiativeTracker5e.jsx","index.jsx"],"names":["DataRow","props","handleInputChange","event","id","setSelectedID","Fragment","style","backgroundColor","this","turnOwner","color","selected","onClick","className","name","value","onChange","initiative","hp","ac","dex","width","notes","React","Component","DataGrid","addRef","ref","rowRefs","push","addRow","rows","state","slice","row","Math","floor","random","Number","MAX_SAFE_INTEGER","setState","selectedID","deleteRow","filter","target","i","length","test","updateName","load","document","cookie","cookieValue","split","find","startsWith","stateObj","JSON","parse","loadState","minutes","seconds","round","moveDown","index","temp","moveUp","nextTurn","turnOwnerFound","updateTurnOwner","incrementRound","orderByInitiative","swapped","prevTurn","renderRows","map","selekted","save","saveObj","saveStr","stringify","cookieName","isOwner","indexOf","columns","getTurnOwnerName","protoTypes","incrementTurn","PropTypes","func","decrementTurn","number","string","InitiativeTracker5e","mins","secs","rnd","createRef","decrementRound","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b09b2375.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n/******************************************************************************\n* Class DataRow *\n* Data for a single row. Allows editing stats, and row selection.\n******************************************************************************/\nexport default class DataRow extends React.Component {\n  constructor(props){\n    super(props);\n  }\n\n  /**\n   * Handles the change event on the inputs and updates the appropriate state value.\n   */\n  handleInputChange = (event) => {\n    this.props.handleInputChange(this.props.id, event);\n  }\n\n  /**\n   * Handles setting the selected id on the parent.\n   */\n  setSelectedID = () => {\n    this.props.setSelectedID(this.props.id);\n  }  \n\n  render() {\n    return (\n      <React.Fragment>\n        <tr style={{backgroundColor: this.props.turnOwner ? 'blue' : 'white'}}>\n          <td>\n            <button style={{color: this.props.selected ? 'green' : 'black'}} onClick={this.setSelectedID} ><span className=\"material-icons\">face</span></button>\n          </td>\n          <td>\n            <input name=\"name\" value={this.props.name} onChange={this.handleInputChange}/>\n          </td>\n          <td >\n            <input name=\"initiative\" value={this.props.initiative} onChange={this.handleInputChange}/>\n          </td>\n          <td>\n            <input name=\"hp\" value={this.props.hp} onChange={this.handleInputChange}/>\n          </td>\n          <td>\n            <input name=\"ac\" value={this.props.ac} onChange={this.handleInputChange}/>\n          </td>\n          <td>\n            <input name=\"dex\" value={this.props.dex} onChange={this.handleInputChange}/>\n          </td>\n          <td>\n            <input style={{width:\"500px\"}} name=\"notes\" value={this.props.notes} onChange={this.handleInputChange}/>\n          </td>\n        </tr>\n      </React.Fragment>\n    );\n  }\n}\n\nDataRow.propTypes = {\n  ac:                PropTypes.number,\n  dex:               PropTypes.number,\n  handleInputChange: PropTypes.func,\n  hp:                PropTypes.number,\n  id:                PropTypes.number,\n  initiative:        PropTypes.number,\n  name:              PropTypes.string,\n  notes:             PropTypes.string,\n  selected:          PropTypes.bool,\n  setSelectedID:     PropTypes.func,\n  turnOwner:         PropTypes.bool\n}\n","import React from 'react';\nimport DataRow from './DataRow.jsx';\nimport PropTypes from 'prop-types';\n\n/******************************************************************************\n* Class DataGrid *\n* Displays a list of the characters and some info about them.\n******************************************************************************/\nexport default class DataGrid extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      selectedID: 0,\n      rows: [{\n        id: 0,\n        name: '',\n        initiative: 0,\n        hp: 0,\n        ac: 0,\n        dex: 0,\n        notes: '',\n        turnOwner: false\n      }],\n      columns: [\n        '',\n        'Name',\n        'Initiative',\n        'HP',\n        'AC',\n        'DEX',\n        'Notes'\n      ],\n      getTurnOwnerName: this.getTurnOwnerName\n    };\n\n    this.cookieName = \"ddrEncounter=\";\n    this.rowRefs = []\n  }\n\n  /**\n   * Adds a referencs to the ref list.\n   * @param  ref  Reference to add.\n   * \n   * NOTE: this actually gets called even on deletion. Who'd a thunk; probably has\n   * to do with the fact that this function is in 'ref'.\n   */\n  addRef = (ref) => {\n    if(ref){\n      this.rowRefs.push(ref);\n    }\n  }\n\n  /**\n   * Adds a row to the row list.\n   */\n  addRow = () => {\n    var rows = this.state.rows.slice();\n    var row = {\n      id: Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER)),\n      name: '',\n      initiative: 0,\n      hp: 0,\n      ac: 0,\n      dex: 0,\n      notes: '',\n      turnOwner: false\n    };\n\n    rows.push(row);\n\n    this.setState({rows: rows, selectedID: -1});\n  };\n\n  componentDidUpdate(){\n    /** Make sure there is always a row, and to update the name of turn owner. */\n    if(this.state.rows.length <= 0){\n      this.updateName('');\n      this.addRow();\n    }\n  }\n\n  /**\n   * Delete a row from the row list for given id.\n   * @param  id  ID of row to delete.\n   */\n  deleteRow = () => {\n    var rows = this.state.rows.slice();\n    var id = this.state.selectedID;\n    rows = rows.filter(function(row){return row.id !== id; });\n    this.setState({rows: rows, selectedID: -1});\n  };\n\n  /** //TODO CH  'event' WAS DEPRECATED. MAY NEED TO FIND ANOTHER WAY TO DO THIS IN THE FUTURE.\n   * Handles the change event on the inputs and updates the appropriate row.\n   * @param  id     ID of row to change.\n   * @param  event  Event from input being changed.\n   */\n  handleInputChange = (id, event) => {\n    var rows  = this.state.rows.slice();\n    var value = event.target.value;\n    var name  = event.target.name;\n\n    for(var i = 0; i < rows.length; i++){\n      if(rows[i].id === id){\n        /** Make sure value is an int. */\n        if(name !== 'name' && name !== 'notes'){\n          if(/^-?\\d*$/.test(value)){\n            value = Number(value);\n          }\n          else{\n            return;\n          }  \n        }\n\n        /** Update the name. */\n        if(rows[i].turnOwner && name === 'name'){\n          this.updateName(value);\n        }\n\n        rows[i][name] = value;\n        this.setState({rows: rows});\n        break;\n      }\n    }\n  }\n\n  /**\n   * Load the encounter from cookies.\n   */\n  load = () => {\n\n    if(document.cookie){\n      var cookieValue = document.cookie\n      .split('; ')\n      .find(row => row.startsWith('ddrEncounter='))\n      .split('=')[1];\n\n      var stateObj = JSON.parse(cookieValue);\n\n      this.props.loadState(stateObj.minutes, stateObj.seconds, stateObj.round);\n      this.setState(stateObj);\n    }\n  }\n\n  /**\n   * Moves row down one.\n   */\n  moveDown = () => {\n    if(this.state.rows.length <= 1 || this.state.selectedID < 0){\n      return;\n    }\n\n    var rows  = this.state.rows.slice();\n    var index = 0;\n\n    for(var i = 0; i < rows.length; i++){\n      if(rows[i].id === this.state.selectedID){\n        if(i + 1 > rows.length - 1){\n          return;\n        }\n\n        index = i;\n        break;\n      }\n    }\n\n    var temp        = rows[index + 1];\n    rows[index + 1] = rows[index];\n    rows[index]     = temp;\n\n    this.setState({rows: rows});\n  }\n\n  /**\n   * Moves row up one.\n   */\n  moveUp = () => {\n    if(this.state.rows.length <= 1 || this.state.selectedID < 0){\n      return;\n    }\n\n    var rows  = this.state.rows.slice();\n    var index = 0;\n    \n    for(var i = 0; i < rows.length; i++){\n      if(rows[i].id === this.state.selectedID){\n        if(i - 1 < 0){\n          return;\n        }\n\n        index = i;\n        break;\n      }\n    }\n\n    var temp        = rows[index - 1];\n    rows[index - 1] = rows[index];\n    rows[index]     = temp;\n\n    this.setState({rows: rows});\n  }\n\n  /**\n   * Updates the turn index to the next character.\n   */\n  nextTurn = () => {\n    var rows = this.state.rows.slice();\n\n    var turnOwnerFound = false;\n\n    if(rows.length > 0){\n      /** Find the turn owner. */\n      for(var i = 0; i < rows.length; i++){\n\n        /** Update turn owner to next character. */\n        if(rows[i] && rows[i].turnOwner){\n          \n          /** Clear out current turn owner. */\n          turnOwnerFound = true;\n          this.updateTurnOwner(rows[i], false);\n          \n          /** Go to index 0 since we are going out of bounds. */\n          if(i + 1 >= rows.length){\n            this.props.incrementRound();\n            this.updateTurnOwner(rows[0], true);\n          }\n          \n          /** Set the index to next character. */\n          else if (rows[i + 1]){\n            this.updateTurnOwner(rows[i + 1], true);\n          }\n          break;\n        }\n      }\n\n      /** No turn owner was found, so set it the the 0 index. */\n      if(!turnOwnerFound){\n        this.updateTurnOwner(rows[0], true);\n      }\n    }\n\n    this.setState({rows:rows});\n  };\n  \n  /**\n   * Orders all rows by initiative. \n   */\n  orderByInitiative = () => {\n    var rows    = this.state.rows.slice();\n    var swapped = false;\n      \n    do\n      {\n      swapped = false;\n      \n      for(var i = 0; i < rows.length - 1; i++)\n        {\n        var init1 = rows[i].initiative + rows[i].dex/100;\n        var init2 = rows[i+1].initiative + rows[i+1].dex/100;\n\n        if(init1 < init2)\n          {\n          var temp    = rows[i];\n          rows[i]     = rows[i + 1];\n          rows[i + 1] = temp;\n          swapped     = true;\n          }\n        }\n      }\n    while(swapped);\n\n    this.setState({rows: rows});\n  }\n\n  /**\n   * Updates the turn index to the previous character.\n   */\n  prevTurn = () => {\n    var rows = this.state.rows.slice();\n\n    var turnOwnerFound = false;\n    \n    if(rows.length > 0){\n      /** Find turn owner. */\n      for(var i = rows.length - 1; i >= 0; i--){\n        \n        /** We do not want to loop around if we are on round 1 and at the beginning of the list. */\n        if(i - 1 < 0 && this.props.round <= 1){\n          break;\n        }\n\n        /** Update turn owner index to next character. */\n        if(rows[i] && rows[i].turnOwner){\n          turnOwnerFound = true;\n          this.updateTurnOwner(rows[i], false);\n          \n          /** If at the beginning of the list, stop.*/\n          if(i - 1 < 0){\n            this.updateTurnOwner(rows[0], true);\n          }\n          else{\n            this.updateTurnOwner(rows[i - 1], true);\n          }\n\n        break;\n        }\n      }\n      \n      /** No turn owner was found, so set it the the 0 index. */\n      if(!turnOwnerFound){\n        this.updateTurnOwner(rows[0], true);\n      }\n    }\n\n    this.setState({rows: rows});\n  };\n\n  /**\n   * Maps row objects to elements.\n   */\n  renderRows = () =>{\n    var rows = this.state.rows.map((row) => {\n      var selekted = this.state.selectedID === row.id;\n\n      return (\n        <DataRow\n          key={row.id}\n          id={row.id}\n          name={row.name}\n          initiative={row.initiative}\n          hp={row.hp}\n          ac={row.ac}\n          dex={row.dex}\n          notes={row.notes}\n          turnOwner={row.turnOwner}\n          handleInputChange={this.handleInputChange}\n          updateName={this.updateName}\n          setSelectedID={this.setSelectedID}\n          selected={selekted}\n          >\n        </DataRow>);\n    });\n    \n    return rows;\n  }\n\n  /**\n   * Save the encounter to cookies.\n   */\n  save = () => {\n    var saveObj = {\n      rows: this.state.rows,\n      minutes: this.props.minutes,\n      seconds: this.props.seconds,\n      round: this.props.round\n    };\n    \n    var saveStr = JSON.stringify(saveObj);\n    \n    document.cookie = this.cookieName + saveStr;\n  }\n\n  /** \n   * Sets the selected ID.\n   * @param  id  ID of the character selected.\n   */\n  setSelectedID = (id) => {\n    this.setState({selectedID: this.state.selectedID === id ? -1 : id});\n  }\n\n  /**\n   * Calls the tracker's update name function.\n   * @param  name  Name of owner.\n   */\n  updateName = (name) => {\n    this.props.updateName(name);\n  }\n\n  /**\n   * Updates the turn owner's name.\n   * @param  id       Row id.\n   * @param  isOwner  Is this the owner of the turn.\n   */\n  updateTurnOwner = (row, isOwner) => {\n    var rows = this.state.rows.slice();\n    var index = rows.indexOf(row);\n\n    rows[index].turnOwner = isOwner;\n    \n    if(isOwner){\n      this.props.updateName(rows[index].name);\n    }\n    \n    this.setState({rows: rows});\n  }\n\n  render(){\n    return (\n      <div>\n        <button className=\"tooltip\" style={{color: 'red'}} onClick={this.deleteRow}>\n          <span className=\"material-icons\">clear</span>\n          <span className=\"tooltiptext\">Delete selected row</span>\n        </button>\n        <button className=\"tooltip\" onClick={this.moveUp}>\n          <span className=\"material-icons\">keyboard_arrow_up</span>\n          <span className=\"tooltiptext\">Move selected row up</span>\n        </button>\n        <button className=\"tooltip\" onClick={this.moveDown}>\n          <span className=\"material-icons\">keyboard_arrow_down</span>\n          <span className=\"tooltiptext\">Move selected row down</span>\n        </button>\n        <button className=\"tooltip\" style={{color: 'green'}} onClick={this.addRow}>\n          <span className=\"material-icons\">add_circle</span>\n          <span className=\"tooltiptext\">Add new row</span>\n        </button>\n        <button className=\"tooltip\" onClick={this.prevTurn}>\n          <span className=\"material-icons\">skip_previous</span>\n          <span className=\"tooltiptext\">Previous turn</span>\n        </button>\n        <button className=\"tooltip\" onClick={this.nextTurn}>\n          <span className=\"material-icons\">skip_next</span>\n          <span className=\"tooltiptext\">Next turn</span>\n        </button>\n        <button className=\"tooltip\" style={{color: 'orange'}} onClick={this.orderByInitiative}>\n          <span className=\"material-icons\">reorder</span>\n          <span className=\"tooltiptext\">Order by initiative</span>\n        </button>\n        <button className=\"tooltip\" style={{color: 'green'}} onClick={this.save}>\n          <span className=\"material-icons\">save</span>\n          <span className=\"tooltiptext\">Save encounter</span>\n        </button>\n        <button className=\"tooltip\" style={{color: 'blue'}} onClick={this.load}>\n          <span className=\"material-icons\">save_alt</span>\n          <span className=\"tooltiptext\">Load encounter from cookies</span>\n        </button>\n        <br></br>\n        <br></br>\n        <table>\n          <colgroup>\n            <col style={{width: \"50px\"}}></col>\n            <col style={{width: \"100px\"}}></col>\n            <col style={{width: \"100px\"}}></col>\n            <col style={{width: \"100px\"}}></col>\n            <col style={{width: \"100px\"}}></col>\n            <col style={{width: \"100px\"}}></col>\n            <col style={{width: \"300px\"}}></col>\n          </colgroup>\n          <tbody>\n            <tr key={0} id={0}>\n              <th>{this.state.columns[0]}</th>\n              <th>{this.state.columns[1]}</th>\n              <th>{this.state.columns[2]}</th>\n              <th>{this.state.columns[3]}</th>\n              <th>{this.state.columns[4]}</th>\n              <th>{this.state.columns[5]}</th>\n              <th>{this.state.columns[6]}</th>\n            </tr>\n            {this.renderRows()}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nDataGrid.protoTypes = {\n  incrementTurn: PropTypes.func,\n  decrementTurn: PropTypes.func,\n  updateName: PropTypes.func,\n  round: PropTypes.number,\n  seconds: PropTypes.string,\n  minutes: PropTypes.string,\n  loadState: PropTypes.func\n}\n","import React from 'react';\nimport DataGrid from './Datagrid.jsx';\n\n/******************************************************************************\n* Class InitiativeTrackerPathfinder *\n* Base for the Initiative Tracker for D&D 5th edition.\n******************************************************************************/\nexport class InitiativeTracker5e extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      round: 1,\n      seconds: '06',\n      minutes: '00',\n      name: ''\n    }\n\n    this.ref = React.createRef();\n  }\n  \n  /** Decrements the current round. Makes sure it doesn't go negative */\n  // decrementRound = () => {\n  //   var r = this.state.round;\n  //   r--;\n\n  //   /** Make sure we don't go into negative rounds. */\n  //   if(r < 1){\n  //     r = 1;\n  //   }\n    \n  //   this.setState({round: r});\n  // }\n\n  /** Increments the current round and clock. */\n  incrementRound = () => {\n    var round = this.state.round;\n    round++;\n\n    var seconds = ((round * 6) % 60);\n    var minutes = (Math.floor(round / 10));\n    \n    this.setState({seconds:(\"0\" + seconds).slice(-2), minutes: (\"0\" + minutes).slice(-2), round: round});\n  }\n\n  /**\n   * Loads information sent from the datagrid.\n   * @param  mins  Minutes elapsed.\n   * @param  secs  Seconds elapsed.\n   * @param  rnd   Current round.\n   */\n  loadState = (mins, secs, rnd) => {\n    this.setState({minutes: mins, seconds: secs, round: rnd});\n  }\n\n  /** \n   * Updates the name.\n   * @param  name  Name of the character whose turn it is.\n   */\n  updateName = (name) => {\n    this.setState({name: name});\n  }\n\n  render(){\n    return (\n      <div>\n        <h1>Initiative Tracker - 5e</h1>\n        <div>\n          <h3>{this.state.minutes} : {this.state.seconds} - Round: {this.state.round}</h3>\n          <h3>{this.state.name.length > 0 ? this.state.name : \"No Name\"}'s Turn</h3>\n        </div>\n        <DataGrid\n          round={this.state.round}\n          updateName={this.updateName}\n          incrementRound={this.incrementRound}\n          decrementRound={this.decrementRound}\n          loadState={this.loadState}\n          minutes={this.state.minutes}\n          seconds={this.state.seconds}/>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {InitiativeTracker5e} from './InitiativeTracker5e.jsx';\n\nclass App extends React.Component{\n  render(){\n    return(\n      <div>\n        <InitiativeTracker5e/>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('app'))\n"],"sourceRoot":""}